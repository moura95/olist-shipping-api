// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: carriers.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const getCarrierRegions = `-- name: GetCarrierRegions :many
SELECT
    cr.id,
    cr.carrier_id,
    cr.region_id,
    cr.estimated_delivery_days,
    cr.price_per_kg,
    r.name as region_name
FROM carrier_regions cr
         JOIN regions r ON cr.region_id = r.id
WHERE cr.carrier_id = $1
`

type GetCarrierRegionsRow struct {
	ID                    uuid.UUID
	CarrierID             uuid.UUID
	RegionID              uuid.UUID
	EstimatedDeliveryDays int32
	PricePerKg            string
	RegionName            string
}

func (q *Queries) GetCarrierRegions(ctx context.Context, carrierID uuid.UUID) ([]GetCarrierRegionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCarrierRegions, carrierID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCarrierRegionsRow{}
	for rows.Next() {
		var i GetCarrierRegionsRow
		if err := rows.Scan(
			&i.ID,
			&i.CarrierID,
			&i.RegionID,
			&i.EstimatedDeliveryDays,
			&i.PricePerKg,
			&i.RegionName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRegionByState = `-- name: GetRegionByState :one
SELECT r.id, r.name
FROM regions r
         JOIN states s ON s.region_id = r.id
WHERE s.code = $1
`

type GetRegionByStateRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) GetRegionByState(ctx context.Context, code string) (GetRegionByStateRow, error) {
	row := q.db.QueryRowContext(ctx, getRegionByState, code)
	var i GetRegionByStateRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listCarriers = `-- name: ListCarriers :many
SELECT id, name, created_at
FROM carriers
ORDER BY name
`

func (q *Queries) ListCarriers(ctx context.Context) ([]Carrier, error) {
	rows, err := q.db.QueryContext(ctx, listCarriers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Carrier{}
	for rows.Next() {
		var i Carrier
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

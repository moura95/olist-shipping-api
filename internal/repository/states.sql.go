// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: states.sql

package repository

import (
	"context"
)

const getStateByCode = `-- name: GetStateByCode :one
SELECT s.code, s.name, r.name as region_name
FROM states s
         JOIN regions r ON s.region_id = r.id
WHERE s.code = $1
`

type GetStateByCodeRow struct {
	Code       string
	Name       string
	RegionName string
}

func (q *Queries) GetStateByCode(ctx context.Context, code string) (GetStateByCodeRow, error) {
	row := q.db.QueryRowContext(ctx, getStateByCode, code)
	var i GetStateByCodeRow
	err := row.Scan(&i.Code, &i.Name, &i.RegionName)
	return i, err
}

const listRegions = `-- name: ListRegions :many
SELECT id, name, created_at
FROM regions
ORDER BY name
`

func (q *Queries) ListRegions(ctx context.Context) ([]Region, error) {
	rows, err := q.db.QueryContext(ctx, listRegions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Region{}
	for rows.Next() {
		var i Region
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStates = `-- name: ListStates :many
SELECT s.code, s.name, r.name as region_name
FROM states s
         JOIN regions r ON s.region_id = r.id
ORDER BY s.name
`

type ListStatesRow struct {
	Code       string
	Name       string
	RegionName string
}

func (q *Queries) ListStates(ctx context.Context) ([]ListStatesRow, error) {
	rows, err := q.db.QueryContext(ctx, listStates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListStatesRow{}
	for rows.Next() {
		var i ListStatesRow
		if err := rows.Scan(&i.Code, &i.Name, &i.RegionName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

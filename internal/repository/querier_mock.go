// Code generated by mockery. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/stretchr/testify/mock"
)

// QuerierMocked is an autogenerated mock type for the Querier type
type QuerierMocked struct {
	mock.Mock
}

func (_m *QuerierMocked) UpdatePackageStatusWithTracking(ctx context.Context, arg UpdatePackageStatusWithTrackingParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UpdatePackageStatusWithTrackingParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQuerierMocked creates a new instance of QuerierMocked. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQuerierMocked(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuerierMocked {
	mock := &QuerierMocked{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CreatePackage provides a mock function with given fields: ctx, arg
func (_m *QuerierMocked) CreatePackage(ctx context.Context, arg CreatePackageParams) (Package, error) {
	ret := _m.Called(ctx, arg)

	var r0 Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CreatePackageParams) (Package, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CreatePackageParams) Package); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(Package)
	}

	if rf, ok := ret.Get(1).(func(context.Context, CreatePackageParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePackage provides a mock function with given fields: ctx, id
func (_m *QuerierMocked) DeletePackage(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCarrierById provides a mock function with given fields: ctx, id
func (_m *QuerierMocked) GetCarrierById(ctx context.Context, id uuid.UUID) (Carrier, error) {
	ret := _m.Called(ctx, id)

	var r0 Carrier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (Carrier, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) Carrier); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(Carrier)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCarrierRegions provides a mock function with given fields: ctx, carrierID
func (_m *QuerierMocked) GetCarrierRegions(ctx context.Context, carrierID uuid.UUID) ([]GetCarrierRegionsRow, error) {
	ret := _m.Called(ctx, carrierID)

	var r0 []GetCarrierRegionsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]GetCarrierRegionsRow, error)); ok {
		return rf(ctx, carrierID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []GetCarrierRegionsRow); ok {
		r0 = rf(ctx, carrierID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GetCarrierRegionsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, carrierID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackageById provides a mock function with given fields: ctx, id
func (_m *QuerierMocked) GetPackageById(ctx context.Context, id uuid.UUID) (Package, error) {
	ret := _m.Called(ctx, id)

	var r0 Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (Package, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) Package); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(Package)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackageByTrackingCode provides a mock function with given fields: ctx, trackingCode
func (_m *QuerierMocked) GetPackageByTrackingCode(ctx context.Context, trackingCode sql.NullString) (Package, error) {
	ret := _m.Called(ctx, trackingCode)

	var r0 Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (Package, error)); ok {
		return rf(ctx, trackingCode.String)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) Package); ok {
		r0 = rf(ctx, trackingCode.String)
	} else {
		r0 = ret.Get(0).(Package)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trackingCode.String)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuotesForPackage provides a mock function with given fields: ctx, arg
func (_m *QuerierMocked) GetQuotesForPackage(ctx context.Context, arg GetQuotesForPackageParams) ([]GetQuotesForPackageRow, error) {
	ret := _m.Called(ctx, arg)

	var r0 []GetQuotesForPackageRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetQuotesForPackageParams) ([]GetQuotesForPackageRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetQuotesForPackageParams) []GetQuotesForPackageRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GetQuotesForPackageRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetQuotesForPackageParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegionByState provides a mock function with given fields: ctx, code
func (_m *QuerierMocked) GetRegionByState(ctx context.Context, code string) (GetRegionByStateRow, error) {
	ret := _m.Called(ctx, code)

	var r0 GetRegionByStateRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (GetRegionByStateRow, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) GetRegionByStateRow); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(GetRegionByStateRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStateByCode provides a mock function with given fields: ctx, code
func (_m *QuerierMocked) GetStateByCode(ctx context.Context, code string) (GetStateByCodeRow, error) {
	ret := _m.Called(ctx, code)

	var r0 GetStateByCodeRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (GetStateByCodeRow, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) GetStateByCodeRow); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(GetStateByCodeRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HireCarrier provides a mock function with given fields: ctx, arg
func (_m *QuerierMocked) HireCarrier(ctx context.Context, arg HireCarrierParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, HireCarrierParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCarriers provides a mock function with given fields: ctx
func (_m *QuerierMocked) ListCarriers(ctx context.Context) ([]Carrier, error) {
	ret := _m.Called(ctx)

	var r0 []Carrier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Carrier, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Carrier); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Carrier)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPackages provides a mock function with given fields: ctx
func (_m *QuerierMocked) ListPackages(ctx context.Context) ([]Package, error) {
	ret := _m.Called(ctx)

	var r0 []Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Package, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Package); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Package)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRegions provides a mock function with given fields: ctx
func (_m *QuerierMocked) ListRegions(ctx context.Context) ([]Region, error) {
	ret := _m.Called(ctx)

	var r0 []Region
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Region, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Region); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Region)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStates provides a mock function with given fields: ctx
func (_m *QuerierMocked) ListStates(ctx context.Context) ([]ListStatesRow, error) {
	ret := _m.Called(ctx)

	var r0 []ListStatesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]ListStatesRow, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []ListStatesRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ListStatesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrackingCodeExists provides a mock function with given fields: ctx, trackingCode
func (_m *QuerierMocked) TrackingCodeExists(ctx context.Context, trackingCode sql.NullString) (bool, error) {
	ret := _m.Called(ctx, trackingCode)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, trackingCode.String)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, trackingCode.String)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, trackingCode.String)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackageStatus provides a mock function with given fields: ctx, arg
func (_m *QuerierMocked) UpdatePackageStatus(ctx context.Context, arg UpdatePackageStatusParams) error {
	ret := _m.Called(ctx, arg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UpdatePackageStatusParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

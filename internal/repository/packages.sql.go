// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: packages.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPackage = `-- name: CreatePackage :one
INSERT INTO packages (tracking_code, product, weight_kg, destination_state, status)
VALUES ($1, $2, $3, $4, 'criado')
RETURNING id, tracking_code, product, weight_kg, destination_state, status, hired_carrier_id, hired_price, hired_delivery_days, created_at, updated_at
`

type CreatePackageParams struct {
	TrackingCode     sql.NullString
	Product          string
	WeightKg         float64
	DestinationState string
}

func (q *Queries) CreatePackage(ctx context.Context, arg CreatePackageParams) (Package, error) {
	row := q.db.QueryRowContext(ctx, createPackage,
		arg.TrackingCode,
		arg.Product,
		arg.WeightKg,
		arg.DestinationState,
	)
	var i Package
	err := row.Scan(
		&i.ID,
		&i.TrackingCode,
		&i.Product,
		&i.WeightKg,
		&i.DestinationState,
		&i.Status,
		&i.HiredCarrierID,
		&i.HiredPrice,
		&i.HiredDeliveryDays,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePackage = `-- name: DeletePackage :exec
DELETE FROM packages
WHERE id = $1
`

func (q *Queries) DeletePackage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePackage, id)
	return err
}

const getCarrierById = `-- name: GetCarrierById :one
SELECT id, name, created_at
FROM carriers
WHERE id = $1
`

func (q *Queries) GetCarrierById(ctx context.Context, id uuid.UUID) (Carrier, error) {
	row := q.db.QueryRowContext(ctx, getCarrierById, id)
	var i Carrier
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getPackageById = `-- name: GetPackageById :one
SELECT id, tracking_code, product, weight_kg, destination_state, status, hired_carrier_id, hired_price, hired_delivery_days, created_at, updated_at
FROM packages
WHERE id = $1
`

func (q *Queries) GetPackageById(ctx context.Context, id uuid.UUID) (Package, error) {
	row := q.db.QueryRowContext(ctx, getPackageById, id)
	var i Package
	err := row.Scan(
		&i.ID,
		&i.TrackingCode,
		&i.Product,
		&i.WeightKg,
		&i.DestinationState,
		&i.Status,
		&i.HiredCarrierID,
		&i.HiredPrice,
		&i.HiredDeliveryDays,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPackageByTrackingCode = `-- name: GetPackageByTrackingCode :one
SELECT id, tracking_code, product, weight_kg, destination_state, status, hired_carrier_id, hired_price, hired_delivery_days, created_at, updated_at
FROM packages
WHERE tracking_code = $1
`

func (q *Queries) GetPackageByTrackingCode(ctx context.Context, trackingCode sql.NullString) (Package, error) {
	row := q.db.QueryRowContext(ctx, getPackageByTrackingCode, trackingCode)
	var i Package
	err := row.Scan(
		&i.ID,
		&i.TrackingCode,
		&i.Product,
		&i.WeightKg,
		&i.DestinationState,
		&i.Status,
		&i.HiredCarrierID,
		&i.HiredPrice,
		&i.HiredDeliveryDays,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getQuotesForPackage = `-- name: GetQuotesForPackage :many
SELECT
    c.name as carier,
    (cr.price_per_kg * $1::DECIMAL)::FLOAT as estimated_price,
    cr.estimated_delivery_days
FROM carriers c
         JOIN carrier_regions cr ON c.id = cr.carrier_id
         JOIN states s ON s.region_id = cr.region_id
WHERE s.code = $2
`

type GetQuotesForPackageParams struct {
	WeightKg  string
	StateCode string
}

type GetQuotesForPackageRow struct {
	Carier                string
	EstimatedPrice        float64
	EstimatedDeliveryDays int32
}

func (q *Queries) GetQuotesForPackage(ctx context.Context, arg GetQuotesForPackageParams) ([]GetQuotesForPackageRow, error) {
	rows, err := q.db.QueryContext(ctx, getQuotesForPackage, arg.WeightKg, arg.StateCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetQuotesForPackageRow{}
	for rows.Next() {
		var i GetQuotesForPackageRow
		if err := rows.Scan(&i.Carier, &i.EstimatedPrice, &i.EstimatedDeliveryDays); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hireCarrier = `-- name: HireCarrier :exec
UPDATE packages
SET hired_carrier_id = $2,
    hired_price = $3,
    hired_delivery_days = $4,
    status = 'esperando_coleta',
    updated_at = NOW()
WHERE id = $1
`

type HireCarrierParams struct {
	ID                uuid.UUID
	HiredCarrierID    uuid.NullUUID
	HiredPrice        sql.NullString
	HiredDeliveryDays sql.NullInt32
}

func (q *Queries) HireCarrier(ctx context.Context, arg HireCarrierParams) error {
	_, err := q.db.ExecContext(ctx, hireCarrier,
		arg.ID,
		arg.HiredCarrierID,
		arg.HiredPrice,
		arg.HiredDeliveryDays,
	)
	return err
}

const listPackages = `-- name: ListPackages :many
SELECT id, tracking_code, product, weight_kg, destination_state, status, hired_carrier_id, hired_price, hired_delivery_days, created_at, updated_at
FROM packages
ORDER BY created_at DESC
`

func (q *Queries) ListPackages(ctx context.Context) ([]Package, error) {
	rows, err := q.db.QueryContext(ctx, listPackages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Package{}
	for rows.Next() {
		var i Package
		if err := rows.Scan(
			&i.ID,
			&i.TrackingCode,
			&i.Product,
			&i.WeightKg,
			&i.DestinationState,
			&i.Status,
			&i.HiredCarrierID,
			&i.HiredPrice,
			&i.HiredDeliveryDays,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const trackingCodeExists = `-- name: TrackingCodeExists :one
SELECT EXISTS(
    SELECT 1 FROM packages
    WHERE tracking_code = $1
)
`

func (q *Queries) TrackingCodeExists(ctx context.Context, trackingCode sql.NullString) (bool, error) {
	row := q.db.QueryRowContext(ctx, trackingCodeExists, trackingCode)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updatePackageStatus = `-- name: UpdatePackageStatus :exec
UPDATE packages
SET status = $2, updated_at = NOW()
WHERE id = $1
`

type UpdatePackageStatusParams struct {
	ID     uuid.UUID
	Status string
}

func (q *Queries) UpdatePackageStatus(ctx context.Context, arg UpdatePackageStatusParams) error {
	_, err := q.db.ExecContext(ctx, updatePackageStatus, arg.ID, arg.Status)
	return err
}

const updatePackageStatusWithTracking = `-- name: UpdatePackageStatusWithTracking :exec
UPDATE packages
SET status = $2, tracking_code = $3, updated_at = NOW()
WHERE id = $1
`

type UpdatePackageStatusWithTrackingParams struct {
	ID           uuid.UUID
	Status       string
	TrackingCode sql.NullString
}

func (q *Queries) UpdatePackageStatusWithTracking(ctx context.Context, arg UpdatePackageStatusWithTrackingParams) error {
	_, err := q.db.ExecContext(ctx, updatePackageStatusWithTracking, arg.ID, arg.Status, arg.TrackingCode)
	return err
}

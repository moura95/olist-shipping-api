name: Deploy to AWS App Runner

on:
  push:
    branches:
      - main
      - feature/aws

env:
  AWS_REGION: sa-east-1
  ECR_REPOSITORY: olist-api
  APP_RUNNER_SERVICE: olist-api

jobs:
  deploy:
    name: Deploy to App Runner
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . -f deploy/build/Dockerfile
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

      - name: Deploy to App Runner
        run: |
          # Check if service exists
          if aws apprunner describe-service --service-arn $(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='${{ env.APP_RUNNER_SERVICE }}'].ServiceArn" --output text) 2>/dev/null; then
            echo "Service exists, updating..."
            SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='${{ env.APP_RUNNER_SERVICE }}'].ServiceArn" --output text)
            aws apprunner start-deployment --service-arn $SERVICE_ARN
          else
            echo "Creating new App Runner service..."
            aws apprunner create-service \
              --service-name ${{ env.APP_RUNNER_SERVICE }} \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "${{ steps.build-image.outputs.image }}",
                  "ImageConfiguration": {
                    "Port": "8080",
                    "RuntimeEnvironmentVariables": {
                      "GIN_MODE": "release",
                      "DB_SOURCE": "${{ secrets.DB_SOURCE }}"
                    }
                  },
                  "ImageRepositoryType": "ECR"
                },
                "AutoDeploymentsEnabled": true
              }' \
              --instance-configuration '{
                "Cpu": "0.25 vCPU",
                "Memory": "0.5 GB"
              }'
          fi

      - name: Get App Runner URL
        run: |
          SERVICE_ARN=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='${{ env.APP_RUNNER_SERVICE }}'].ServiceArn" --output text)
          SERVICE_URL=$(aws apprunner describe-service --service-arn $SERVICE_ARN --query "Service.ServiceUrl" --output text)
          echo "ðŸš€ App deployed at: https://$SERVICE_URL"
          echo "ðŸ“‹ Health check: https://$SERVICE_URL/healthz"
          echo "ðŸ“– Swagger: https://$SERVICE_URL/swagger/index.html"